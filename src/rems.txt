#1. init firebase ==>> {
    1. yarn add firebase & init SDK
    2. const firebaseApp = firebase.initializeApp(firebaseConfig);
        export const auth = firebase.auth();
} ==>> done

#2. build the UI ** ==>> {
    **. build Header component (Navbar) ==>> {
    nav => height =60px; logo => width: 60px; m: 18px 20px 0; form height: 40px;
    }
    **. build header(slider)
    **. build products
    ** build ShoppingCart comp
    ** logIn / signUp pages
}

**generate stars depends on number ==>> Array(n).fill('').map((_,i) => <p>star</p>)
    || Array.from({length: n}, (e,i) => <p>star</p>)

** icons from materialUI ==>> done
** react currency format for subtotal

**. get axios data in useEffect({}) in useState() first, then use it in props.

#4. routing pages and navbar

#5. global state for products => context  api ==>> {
    a. [create context, provider, consume with useContext(), reducer file[state={shoppingCart:[]}, reducer, actions[add_product, remove_cart]]]
    b. useMemo() ==>> for more optimization(cache old values) for provider value
    c. dispatch => ({add_product, {data}}) onCLick add_BTN_product
}

** shoppingCart count depends on shoppingCart[].length and get Total price
** shoppingCart products view.

#6. singIn / signUp with firebase auth. + {inputs state + submit Function + validation confirm password & username }

#7. make a listener for the user (onAuthStateChange((user) => {})) in App + add user dispatches (set_user, logOut)to the reducer + make (signIn/signOut) in navbar depends on user state + and modify redirected page depends on user(!user => '/login') handle signOut() method 
/****************************************************************/
/****************************************************************/

#8. build payment page ==>> {
    1. build UI =>[review items (from the cart) + payment method => (stripe)]
    2. onClick proceed btn in subtotal
    3. install stripe for react
    4. follow the docs
    ** useElement ==>> to pass secure info to stripe api in handleSubmit()
    ** useStripe ==>> 
    ** stripe event (e) e.empty => true if value is empty (https://stripe.com/docs/js/element/events/on_change?type=paymentElement)
    ** [process] => to check if there's a payment operation is On to disable/enable pay Btn
    5. use firebase clouds & express + stripe ==>> {
        
    }
}

** history.replace() ==>> if you don't want user can be able to go back to this page after leave it
** to use env file in react ==>> {
    it's exist by default in react not need a package => {
        1. create .env file
        2. start vars name with REACT_APP_VAR_NAME = ...
        3. call it with => process.env.REACT_APP_VAR_NAME
    }
}
// valid visa card for test only ==>> 4242 4242 4242 4242   42 42 424

9. fireStore  ==>> to store the user's products (cart) ==>> users => userId => orders => paymentIntentId ==> set({cart, amount: pay...amount, created: pay....created})

** don't forget to turn on the server

10. create orders page to keep the products u buy in the view by fetching it from the DB (fireStore) not the client state

Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore

11. bonus ==>> {
    protected routers
}
12. make responsive layout